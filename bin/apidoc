#!/usr/bin/env ruby

# CLI to apidoc
#
# Usage:
#  apidoc <command> <arguments>
#  PROFILE=localhost apidoc <command> <arguments>
#
# Environment variables:
#    PROFILE: will default to the 'default' specified in your configuration file
#
# The arguments vary by the command
#
# apidoc list organizations
#  - Returns a list of all of the organizations that you have access to
#  - Pagination is implemented with environment variables LIMIT and OFFSET. Example:
#    LIMIT=10 OFFSET=0 apidoc list organizations
#
# apidoc list applications bryzek
#  - Returns a list of the applications for the organization bryzek
#  - Pagination is implemented with environment variables LIMIT and OFFSET. Example:
#    HAS_VERSION=t LIMIT=10 OFFSET=0 apidoc list applications bryzek
#
# apidoc list versions bryzek apidoc
#  - Returns a list of all of the versions for the specific org and application.
#  - Pagination is implemented with environment variables LIMIT and OFFSET. Example:
#    LIMIT=10 OFFSET=0 apidoc list applications bryzek
#
# apidoc code bryzek apidoc latest scala_models
#  - Returns the code for bryzek/apidoc version 'latest' using the
#    codegenerator 'scala_models'
#
# apidoc upload bryzek apidoc api/api.json [--version 1.5.0-dev]
#  - Uploads the file api/api.json to the bryzek org, apidoc application.
#    The uploaded file will be the specified version, defaulting to
#    the output from git describe.
#
# apidoc update [--path path]
#  - Reads a config file, optionally specified by path
#    parameter. Invokes the apidoc code generators specified in the
#    configuration file.
#
# apidoc cli version
#  - Displays the current version of the CLI
#
# apidoc cli version latest
#  - Displays the latest available version of the CLI
#
# apidoc cli upgrade
#  - Upgrade the CLI to the latest version
#

load File.join(File.dirname(__FILE__), 'apidoc-cli-config')

env = {
  :profile => ApidocCli::Util.read_non_empty_string(ENV['PROFILE']),
  :limit => ApidocCli::Util.read_non_empty_integer(ENV['LIMIT']),
  :offset => ApidocCli::Util.read_non_empty_integer(ENV['OFFSET']),
  :has_version => ApidocCli::Util.read_non_empty_string(ENV['HAS_VERSION'])
}

client = ApidocCli::Config.client_from_profile(:profile => env[:profile])

command = ARGV.shift.to_s.strip

if command == "list"
  resource = ARGV.shift.to_s.strip

  if resource == "organizations"
    client.organizations.get(:limit => env[:limit], :offset => env[:offset]).each do |org|
      puts org.key
    end

  elsif resource == "applications"
    org = ARGV.shift.to_s.strip

    if org == ""
      puts "organization is required"
      exit(1)
    else
      client.applications.get_by_org_key(org,
                                         :limit => env[:limit],
                                         :offset => env[:offset],
                                         :has_version => Com::Bryzek::Apidoc::Api::V0::HttpClient::Helper.to_boolean('has_version', env[:has_version])
                                         ).each do |app|
        puts app.key
      end
    end

  elsif resource == "versions"
    org = ARGV.shift.to_s.strip
    application = ARGV.shift.to_s.strip

    if org == "" || application == ""
      puts "organization and application are required"
      exit(1)
    else
      client.versions.get_by_org_key_and_application_key(org, application, :limit => env[:limit], :offset => env[:offset]).each do |v|
        puts v.version
      end
    end

  elsif resource == ""
    puts "resource to list is required"
    exit(1)

  else
    puts "unrecognized resource[#{resource}]"
    exit(1)
  end

elsif command == "code"
  org = ARGV.shift.to_s.strip
  application = ARGV.shift.to_s.strip
  version = ARGV.shift.to_s.strip
  generator = ARGV.shift.to_s.strip
  filename = ARGV.shift.to_s.strip
  if filename == ""
    filename = nil
  end

  if org == "" || application == "" || version == "" || generator == ""
    puts "org, application, version, and generator are required"
    exit(1)
  end

  begin
    code = client.code.get_by_org_key_and_application_key_and_version_and_generator_key(org, application, version, generator)
    if filename
      if file = code.files.find { |f| f.name == filename }
        puts file.contents
      else
        $stderr.puts "  ERROR: Could not find file named #{filename} for generator[#{generator}]. Available filenames: #{code.files.map(&:name).join(", ")}"
      end
    else
      puts "#{generator} Files:"
      code.files.each do |f|
        puts " - #{f.name}"
      end
    end

  rescue Com::Bryzek::Apidoc::Api::V0::HttpClient::ServerError => e
    if e.code == 404
      $stderr.puts "  ERROR: 404 when accessing URI: #{e.uri}"
    elsif e.code == 409
      errors = JSON.parse(e.body).map { |h| h["message"] }.join(", ")
      $stderr.puts "  ERROR: 409: " + errors
    else
      raise e
    end
  end

elsif command == "upload"
  org = ARGV.shift.to_s.strip
  application = ARGV.shift.to_s.strip
  path = ARGV.shift.to_s.strip

  args = ApidocCli::Args.parse(ARGV)
  version = args[:version].to_s.strip

  if org == "" || application == "" || path == ""
    puts "org, application, path are required"
    exit(1)
  end

  if !File.exists?(path)
    puts "File[#{path}] does not exist"
    exit(1)
  end

  if version == ""
    default_version = `git describe`.strip
    if md = default_version.match(/(\w?\d+\.\d+)\.(\d+)\-.+/)
      default_version = "%s.%s-dev" % [md[1], md[2].to_i + 1]
    end

    print "Version"
    if default_version != ""
      print " [#{default_version}]"
    end
    print ": "

    version = nil
    while version.nil?
      answer = $stdin.gets
      if answer.strip == "" && default_version != ""
        version = default_version
      else
        version = answer.strip
      end
    end
  end

  original_form = Com::Bryzek::Apidoc::Api::V0::Models::OriginalForm.new(:data => IO.read(path))
  form = Com::Bryzek::Apidoc::Api::V0::Models::VersionForm.new(:original_form => original_form)

  print "Uploading #{path} to #{client.url}/#{org}/#{application}/#{version} ... "
  begin
    client.versions.put_by_org_key_and_application_key_and_version(org, application, version, form)
    puts "success"
  rescue Com::Bryzek::Apidoc::Api::V0::HttpClient::ServerError => e
    puts "1 or more errors:"
    JSON.parse(e.body).each do |error|
      if error['code'] == "validation_error"
        puts " - %s" % error['message']
      else
        puts " - %s: %s" % [error['code'], error['message']]
      end
    end
  end

elsif command == "update"
  args = ApidocCli::Args.parse(ARGV)
  path = File.expand_path(args[:path] || ApidocCli::AppConfig::DEFAULT_FILENAME)

  if !File.exists?(path)
    puts "File #{path} does not exit"
    exit(1)
  end

  target_dir = File.dirname(path)

  updates = []
  puts "Fetching code from #{client.url}"

  app_config = ApidocCli::AppConfig.new(:path => path)

  pwd = `pwd`.strip
  
  app_config.code.projects.map do |project|
    project.generators.each do |generator|
      generator.targets.each do |target|
        puts "  #{project.org}/#{project.name}/#{project.version}/#{generator.name}..."
        base_target_path = File.join(target_dir, target)

        begin
          client.code.get_by_org_key_and_application_key_and_version_and_generator_key(project.org, project.name, project.version, generator.name).files.each do |file|

            # ... at the end of path signifies that the path sepecified is the root and directories from apidoc will be used.
            # Example  <generator>: some/path/...
            # Files will be put in "some/path/<directories-from-apidoc>"
            if base_target_path.end_with? "..."
              base_target_path = File.join(base_target_path.gsub("...", ""), file.dir)
            end

            # check if target path ends with the filename - if not, this is a directory target and need to check if dir exists
            # for example: "play_2_x_routes: api/conf/routes" is a file
            # while "anorm_2_x_parsers: api/app/generated" should be a directory we check if exists
            FileUtils.mkdir_p(base_target_path) unless base_target_path.include?(file.name) || Dir.exists?(base_target_path)

            target_path = File.directory?(base_target_path) ? File.join(base_target_path, file.name) : base_target_path
            existing_source = File.exists?(target_path) ? IO.read(target_path).strip : ""

            print "    " + target_path.sub(/^#{pwd}\/?/, '') + ": "
            if file.contents.strip == existing_source.strip
              puts "unchanged"
            else
              puts "changed"
              updates << { :source => file.contents, :generator => generator.name, :target => target_path }
            end
          end
        rescue Com::Bryzek::Apidoc::Api::V0::HttpClient::ServerError => e
          if e.code == 404
            puts "not found"
          else
            puts ""
            raise e
          end
        end
        puts ""
      end
    end
  end

  puts ""
  if !updates.empty?
    puts "Copying updated code"
    updates.each do |data|
      puts " - #{data[:generator]} => #{data[:target]}"
      ApidocCli::Util.write_to_file(data[:target], data[:source])
    end
  end

elsif command == "cli"
  subcommand = ARGV.shift.to_s.strip

  if subcommand == "version"
    puts ApidocCli::Version.current

  elsif subcommand == "latest"
    puts ApidocCli::Version.latest

  elsif subcommand == "upgrade"
    current = ApidocCli::Version.current
    latest = ApidocCli::Version.latest
    if current == latest
      puts "you already have the latest version[#{current}] installed"
    else
      ["git fetch", "git checkout #{latest}"].each do |cmd|
        puts cmd
        `#{cmd}`
      end

      puts "apidoc-cli upgraded to latest version"
    end

  else
    puts "cli subcommand is required"
    exit(1)
  end

elsif command == ""
  puts "command is required"
  exit(1)

else
  puts "unrecognized command[#{command}]"
  exit(1)
end
